

High Performance


PyPy是一个独立的解析器, 通过即时编译(JIT,Just-in-time)代码避免逐行解释执行来提升运行速度的(将编译过的行代码缓存起来,从而加快速度)。我们一般使用的Python一般是使用C实现的,为了和其余解析器区分一般又叫CPython.

就像其他人提到的，PyPy有很弱的C语言扩展性。它支持C语言扩展，但是比Python本身的速度还慢。因此，很多模块本身就要求使用CPython。

CPython 上的Numpy的数据处理性非常好，满足了那些既要求速度又大量使用Pandas, SciPy等数据分析任务的库的人。

所以，Pypy 要么不支持或者很弱支持C语言扩展，要么减慢了那些数据处理的速度。完全无法比拟既可以满足速度要求又简单易用的CPyhon。

第二点，Python 3的支持在现阶段还是实验期。那些使用最新版本的Python新功能的人，现在应该还不愿意扔掉那些还在新鲜期的新奇功能。

第三点，PyPy 并不是真正的脚本快，而大多数使用Python 的人就是在用脚本。这些脚本就是一些简短的程序。 PyPy 的最大优点是它针对长时间运行的简单数字处理的即时 (JIT) 编译器。直白地说， PyPy的先编译处理时间比CPython长的多。

第四点，惰性。转移到PyPy需要重新装备机器. 这对很多用户或者使用机构来说，都是太多的额外工作了。


可见,针对C扩展Python还是要比PYPY好的,因此做数据分析的话,Python还是更好一些.然而要是不调用numpy一类的库时,只是自己去做一些耗时的数字运算和反复调用到某些函数/类时,pypy还是很有优势的,尤其程序较大时.


1.简单的数字计算采用即时编译
2.
PyPy是用RPython(CPython的子集)实现的Python，根据官网的基准测试数据，它比CPython实现的Python要快6倍以上。快的原因是使用了Just-in-Time(JIT)编译器，即动态编译器，与静态编译器(如gcc,javac等)不同，它是利用程序运行的过程的数据进行优化。由于历史原因，目前pypy中还保留着GIL，不过正在进行的STM项目试图将PyPy变成没有GIL的Python。

如果python程序中含有C扩展(非cffi的方式)，JIT的优化效果会大打折扣，甚至比CPython慢（比Numpy）。所以在PyPy中最好用纯Python或使用cffi扩展。
3.PyPy为其即时编译器带来的好处是对长时间运行的脚本支持，若是简单而短小的脚本的话，预热时间就显得长了点。

-----------------ppt--------------------------
优点：
现在已是多平台支持


这是一个编译rPython的编译器，或者说这个编译器有一个rPython的前端。


哪些著名的公司在用Python？
Google
Youtube
Dropbox
Mozilla
NASA
豆瓣

Python为什么会慢？
在C语言中，一个加法操作，需要一条指令就完成了，但是由于Python是动态语言，一个加操作需要N个指令才能完成，比如判断类型、对象引用的读取等等。
PyPy是怎么操作的？
比如集中优化循环，在推到出类型的情况下，大大减少指令的数量，以达减少指令数的目的，进而得到优化。


-----------------end--------------------------